"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseStatisticsApi = exports.PromiseMarketingEmailsApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseMarketingEmailsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableMarketingEmailsApi(configuration, requestFactory, responseProcessor);
    }
    archiveWithHttpInfo(emailId, archived, _options) {
        const result = this.api.archiveWithHttpInfo(emailId, archived, _options);
        return result.toPromise();
    }
    archive(emailId, archived, _options) {
        const result = this.api.archive(emailId, archived, _options);
        return result.toPromise();
    }
    cloneWithHttpInfo(contentCloneRequestVNext, _options) {
        const result = this.api.cloneWithHttpInfo(contentCloneRequestVNext, _options);
        return result.toPromise();
    }
    clone(contentCloneRequestVNext, _options) {
        const result = this.api.clone(contentCloneRequestVNext, _options);
        return result.toPromise();
    }
    createWithHttpInfo(emailCreateRequest, _options) {
        const result = this.api.createWithHttpInfo(emailCreateRequest, _options);
        return result.toPromise();
    }
    create(emailCreateRequest, _options) {
        const result = this.api.create(emailCreateRequest, _options);
        return result.toPromise();
    }
    createAbTestVariationWithHttpInfo(abTestCreateRequestVNext, _options) {
        const result = this.api.createAbTestVariationWithHttpInfo(abTestCreateRequestVNext, _options);
        return result.toPromise();
    }
    createAbTestVariation(abTestCreateRequestVNext, _options) {
        const result = this.api.createAbTestVariation(abTestCreateRequestVNext, _options);
        return result.toPromise();
    }
    getAbTestVariationWithHttpInfo(emailId, _options) {
        const result = this.api.getAbTestVariationWithHttpInfo(emailId, _options);
        return result.toPromise();
    }
    getAbTestVariation(emailId, _options) {
        const result = this.api.getAbTestVariation(emailId, _options);
        return result.toPromise();
    }
    getByIdWithHttpInfo(emailId, includeStats, marketingCampaignNames, workflowNames, includedProperties, archived, _options) {
        const result = this.api.getByIdWithHttpInfo(emailId, includeStats, marketingCampaignNames, workflowNames, includedProperties, archived, _options);
        return result.toPromise();
    }
    getById(emailId, includeStats, marketingCampaignNames, workflowNames, includedProperties, archived, _options) {
        const result = this.api.getById(emailId, includeStats, marketingCampaignNames, workflowNames, includedProperties, archived, _options);
        return result.toPromise();
    }
    getDraftWithHttpInfo(emailId, _options) {
        const result = this.api.getDraftWithHttpInfo(emailId, _options);
        return result.toPromise();
    }
    getDraft(emailId, _options) {
        const result = this.api.getDraft(emailId, _options);
        return result.toPromise();
    }
    getPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, includeStats, marketingCampaignNames, workflowNames, type, isPublished, includedProperties, archived, _options) {
        const result = this.api.getPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, includeStats, marketingCampaignNames, workflowNames, type, isPublished, includedProperties, archived, _options);
        return result.toPromise();
    }
    getPage(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, includeStats, marketingCampaignNames, workflowNames, type, isPublished, includedProperties, archived, _options) {
        const result = this.api.getPage(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, includeStats, marketingCampaignNames, workflowNames, type, isPublished, includedProperties, archived, _options);
        return result.toPromise();
    }
    getRevisionByIdWithHttpInfo(emailId, revisionId, _options) {
        const result = this.api.getRevisionByIdWithHttpInfo(emailId, revisionId, _options);
        return result.toPromise();
    }
    getRevisionById(emailId, revisionId, _options) {
        const result = this.api.getRevisionById(emailId, revisionId, _options);
        return result.toPromise();
    }
    getRevisionsWithHttpInfo(emailId, after, before, limit, _options) {
        const result = this.api.getRevisionsWithHttpInfo(emailId, after, before, limit, _options);
        return result.toPromise();
    }
    getRevisions(emailId, after, before, limit, _options) {
        const result = this.api.getRevisions(emailId, after, before, limit, _options);
        return result.toPromise();
    }
    publishOrSendWithHttpInfo(emailId, _options) {
        const result = this.api.publishOrSendWithHttpInfo(emailId, _options);
        return result.toPromise();
    }
    publishOrSend(emailId, _options) {
        const result = this.api.publishOrSend(emailId, _options);
        return result.toPromise();
    }
    resetDraftWithHttpInfo(emailId, _options) {
        const result = this.api.resetDraftWithHttpInfo(emailId, _options);
        return result.toPromise();
    }
    resetDraft(emailId, _options) {
        const result = this.api.resetDraft(emailId, _options);
        return result.toPromise();
    }
    restoreDraftRevisionWithHttpInfo(emailId, revisionId, _options) {
        const result = this.api.restoreDraftRevisionWithHttpInfo(emailId, revisionId, _options);
        return result.toPromise();
    }
    restoreDraftRevision(emailId, revisionId, _options) {
        const result = this.api.restoreDraftRevision(emailId, revisionId, _options);
        return result.toPromise();
    }
    restoreRevisionWithHttpInfo(emailId, revisionId, _options) {
        const result = this.api.restoreRevisionWithHttpInfo(emailId, revisionId, _options);
        return result.toPromise();
    }
    restoreRevision(emailId, revisionId, _options) {
        const result = this.api.restoreRevision(emailId, revisionId, _options);
        return result.toPromise();
    }
    unpublishOrCancelWithHttpInfo(emailId, _options) {
        const result = this.api.unpublishOrCancelWithHttpInfo(emailId, _options);
        return result.toPromise();
    }
    unpublishOrCancel(emailId, _options) {
        const result = this.api.unpublishOrCancel(emailId, _options);
        return result.toPromise();
    }
    updateWithHttpInfo(emailId, emailUpdateRequest, archived, _options) {
        const result = this.api.updateWithHttpInfo(emailId, emailUpdateRequest, archived, _options);
        return result.toPromise();
    }
    update(emailId, emailUpdateRequest, archived, _options) {
        const result = this.api.update(emailId, emailUpdateRequest, archived, _options);
        return result.toPromise();
    }
    upsertDraftWithHttpInfo(emailId, emailUpdateRequest, _options) {
        const result = this.api.upsertDraftWithHttpInfo(emailId, emailUpdateRequest, _options);
        return result.toPromise();
    }
    upsertDraft(emailId, emailUpdateRequest, _options) {
        const result = this.api.upsertDraft(emailId, emailUpdateRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseMarketingEmailsApi = PromiseMarketingEmailsApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    getEmailsListWithHttpInfo(startTimestamp, endTimestamp, emailIds, property, _options) {
        const result = this.api.getEmailsListWithHttpInfo(startTimestamp, endTimestamp, emailIds, property, _options);
        return result.toPromise();
    }
    getEmailsList(startTimestamp, endTimestamp, emailIds, property, _options) {
        const result = this.api.getEmailsList(startTimestamp, endTimestamp, emailIds, property, _options);
        return result.toPromise();
    }
    getHistogramWithHttpInfo(interval, startTimestamp, endTimestamp, emailIds, _options) {
        const result = this.api.getHistogramWithHttpInfo(interval, startTimestamp, endTimestamp, emailIds, _options);
        return result.toPromise();
    }
    getHistogram(interval, startTimestamp, endTimestamp, emailIds, _options) {
        const result = this.api.getHistogram(interval, startTimestamp, endTimestamp, emailIds, _options);
        return result.toPromise();
    }
}
exports.PromiseStatisticsApi = PromiseStatisticsApi;
//# sourceMappingURL=PromiseAPI.js.map